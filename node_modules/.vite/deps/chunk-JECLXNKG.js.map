{
  "version": 3,
  "sources": ["../../three/examples/jsm/math/ConvexHull.js", "../../three/examples/jsm/geometries/ConvexGeometry.js"],
  "sourcesContent": ["import {\r\n\tLine3,\r\n\tPlane,\r\n\tTriangle,\r\n\tVector3\r\n} from 'three';\r\n\r\n/**\r\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\r\n */\r\n\r\nconst Visible = 0;\r\nconst Deleted = 1;\r\n\r\nconst _v1 = new Vector3();\r\nconst _line3 = new Line3();\r\nconst _plane = new Plane();\r\nconst _closestPoint = new Vector3();\r\nconst _triangle = new Triangle();\r\n\r\nclass ConvexHull {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.tolerance = - 1;\r\n\r\n\t\tthis.faces = []; // the generated faces of the convex hull\r\n\t\tthis.newFaces = []; // this array holds the faces that are generated within a single iteration\r\n\r\n\t\t// the vertex lists work as follows:\r\n\t\t//\r\n\t\t// let 'a' and 'b' be 'Face' instances\r\n\t\t// let 'v' be points wrapped as instance of 'Vertex'\r\n\t\t//\r\n\t\t//     [v, v, ..., v, v, v, ...]\r\n\t\t//      ^             ^\r\n\t\t//      |             |\r\n\t\t//  a.outside     b.outside\r\n\t\t//\r\n\t\tthis.assigned = new VertexList();\r\n\t\tthis.unassigned = new VertexList();\r\n\r\n\t\tthis.vertices = []; \t// vertices of the hull (internal representation of given geometry data)\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\t// The algorithm needs at least four points.\r\n\r\n\t\tif ( points.length >= 4 ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.vertices.push( new VertexNode( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.compute();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromObject( object ) {\r\n\r\n\t\tconst points = [];\r\n\r\n\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\tobject.traverse( function ( node ) {\r\n\r\n\t\t\tconst geometry = node.geometry;\r\n\r\n\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\tconst attribute = geometry.attributes.position;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst point = new Vector3();\r\n\r\n\t\t\t\t\t\tpoint.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\tpoints.push( point );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn this.setFromPoints( points );\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\tconst faces = this.faces;\r\n\r\n\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst face = faces[ i ];\r\n\r\n\t\t\t// compute signed distance and check on what half space the point lies\r\n\r\n\t\t\tif ( face.distanceToPoint( point ) > this.tolerance ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tintersectRay( ray, target ) {\r\n\r\n\t\t// based on \"Fast Ray-Convex Polyhedron Intersection\" by Eric Haines, GRAPHICS GEMS II\r\n\r\n\t\tconst faces = this.faces;\r\n\r\n\t\tlet tNear = - Infinity;\r\n\t\tlet tFar = Infinity;\r\n\r\n\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst face = faces[ i ];\r\n\r\n\t\t\t// interpret faces as planes for the further computation\r\n\r\n\t\t\tconst vN = face.distanceToPoint( ray.origin );\r\n\t\t\tconst vD = face.normal.dot( ray.direction );\r\n\r\n\t\t\t// if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\r\n\t\t\t// the ray is turned away or parallel to the plane, there is no intersection\r\n\r\n\t\t\tif ( vN > 0 && vD >= 0 ) return null;\r\n\r\n\t\t\t// compute the distance from the rayâ€™s origin to the intersection with the plane\r\n\r\n\t\t\tconst t = ( vD !== 0 ) ? ( - vN / vD ) : 0;\r\n\r\n\t\t\t// only proceed if the distance is positive. a negative distance means the intersection point\r\n\t\t\t// lies \"behind\" the origin\r\n\r\n\t\t\tif ( t <= 0 ) continue;\r\n\r\n\t\t\t// now categorized plane as front-facing or back-facing\r\n\r\n\t\t\tif ( vD > 0 ) {\r\n\r\n\t\t\t\t// plane faces away from the ray, so this plane is a back-face\r\n\r\n\t\t\t\ttFar = Math.min( t, tFar );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// front-face\r\n\r\n\t\t\t\ttNear = Math.max( t, tNear );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tNear > tFar ) {\r\n\r\n\t\t\t\t// if tNear ever is greater than tFar, the ray must miss the convex hull\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// evaluate intersection point\r\n\r\n\t\t// always try tNear first since its the closer intersection point\r\n\r\n\t\tif ( tNear !== - Infinity ) {\r\n\r\n\t\t\tray.at( tNear, target );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tray.at( tFar, target );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tintersectsRay( ray ) {\r\n\r\n\t\treturn this.intersectRay( ray, _v1 ) !== null;\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.faces = [];\r\n\t\tthis.vertices = [];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\r\n\r\n\taddVertexToFace( vertex, face ) {\r\n\r\n\t\tvertex.face = face;\r\n\r\n\t\tif ( face.outside === null ) {\r\n\r\n\t\t\tthis.assigned.append( vertex );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.assigned.insertBefore( face.outside, vertex );\r\n\r\n\t\t}\r\n\r\n\t\tface.outside = vertex;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Removes a vertex from the 'assigned' list of vertices and from the given face\r\n\r\n\tremoveVertexFromFace( vertex, face ) {\r\n\r\n\t\tif ( vertex === face.outside ) {\r\n\r\n\t\t\t// fix face.outside link\r\n\r\n\t\t\tif ( vertex.next !== null && vertex.next.face === face ) {\r\n\r\n\t\t\t\t// face has at least 2 outside vertices, move the 'outside' reference\r\n\r\n\t\t\t\tface.outside = vertex.next;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// vertex was the only outside vertex that face had\r\n\r\n\t\t\t\tface.outside = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.assigned.remove( vertex );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertex list\r\n\r\n\tremoveAllVerticesFromFace( face ) {\r\n\r\n\t\tif ( face.outside !== null ) {\r\n\r\n\t\t\t// reference to the first and last vertex of this face\r\n\r\n\t\t\tconst start = face.outside;\r\n\t\t\tlet end = face.outside;\r\n\r\n\t\t\twhile ( end.next !== null && end.next.face === face ) {\r\n\r\n\t\t\t\tend = end.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.assigned.removeSubList( start, end );\r\n\r\n\t\t\t// fix references\r\n\r\n\t\t\tstart.prev = end.next = null;\r\n\t\t\tface.outside = null;\r\n\r\n\t\t\treturn start;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Removes all the visible vertices that 'face' is able to see\r\n\r\n\tdeleteFaceVertices( face, absorbingFace ) {\r\n\r\n\t\tconst faceVertices = this.removeAllVerticesFromFace( face );\r\n\r\n\t\tif ( faceVertices !== undefined ) {\r\n\r\n\t\t\tif ( absorbingFace === undefined ) {\r\n\r\n\t\t\t\t// mark the vertices to be reassigned to some other face\r\n\r\n\t\t\t\tthis.unassigned.appendChain( faceVertices );\r\n\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// if there's an absorbing face try to assign as many vertices as possible to it\r\n\r\n\t\t\t\tlet vertex = faceVertices;\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\t// we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\r\n\t\t\t\t\t// will be changed by upcoming method calls\r\n\r\n\t\t\t\t\tconst nextVertex = vertex.next;\r\n\r\n\t\t\t\t\tconst distance = absorbingFace.distanceToPoint( vertex.point );\r\n\r\n\t\t\t\t\t// check if 'vertex' is able to see 'absorbingFace'\r\n\r\n\t\t\t\t\tif ( distance > this.tolerance ) {\r\n\r\n\t\t\t\t\t\tthis.addVertexToFace( vertex, absorbingFace );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.unassigned.append( vertex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// now assign next vertex\r\n\r\n\t\t\t\t\tvertex = nextVertex;\r\n\r\n\t\t\t\t} while ( vertex !== null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Reassigns as many vertices as possible from the unassigned list to the new faces\r\n\r\n\tresolveUnassignedPoints( newFaces ) {\r\n\r\n\t\tif ( this.unassigned.isEmpty() === false ) {\r\n\r\n\t\t\tlet vertex = this.unassigned.first();\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\t// buffer 'next' reference, see .deleteFaceVertices()\r\n\r\n\t\t\t\tconst nextVertex = vertex.next;\r\n\r\n\t\t\t\tlet maxDistance = this.tolerance;\r\n\r\n\t\t\t\tlet maxFace = null;\r\n\r\n\t\t\t\tfor ( let i = 0; i < newFaces.length; i ++ ) {\r\n\r\n\t\t\t\t\tconst face = newFaces[ i ];\r\n\r\n\t\t\t\t\tif ( face.mark === Visible ) {\r\n\r\n\t\t\t\t\t\tconst distance = face.distanceToPoint( vertex.point );\r\n\r\n\t\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\t\tmaxFace = face;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( maxDistance > 1000 * this.tolerance ) break;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 'maxFace' can be null e.g. if there are identical vertices\r\n\r\n\t\t\t\tif ( maxFace !== null ) {\r\n\r\n\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvertex = nextVertex;\r\n\r\n\t\t\t} while ( vertex !== null );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Computes the extremes of a simplex which will be the initial hull\r\n\r\n\tcomputeExtremes() {\r\n\r\n\t\tconst min = new Vector3();\r\n\t\tconst max = new Vector3();\r\n\r\n\t\tconst minVertices = [];\r\n\t\tconst maxVertices = [];\r\n\r\n\t\t// initially assume that the first vertex is the min/max\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tminVertices[ i ] = maxVertices[ i ] = this.vertices[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t\tmin.copy( this.vertices[ 0 ].point );\r\n\t\tmax.copy( this.vertices[ 0 ].point );\r\n\r\n\t\t// compute the min/max vertex on all six directions\r\n\r\n\t\tfor ( let i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst vertex = this.vertices[ i ];\r\n\t\t\tconst point = vertex.point;\r\n\r\n\t\t\t// update the min coordinates\r\n\r\n\t\t\tfor ( let j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tif ( point.getComponent( j ) < min.getComponent( j ) ) {\r\n\r\n\t\t\t\t\tmin.setComponent( j, point.getComponent( j ) );\r\n\t\t\t\t\tminVertices[ j ] = vertex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update the max coordinates\r\n\r\n\t\t\tfor ( let j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tif ( point.getComponent( j ) > max.getComponent( j ) ) {\r\n\r\n\t\t\t\t\tmax.setComponent( j, point.getComponent( j ) );\r\n\t\t\t\t\tmaxVertices[ j ] = vertex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use min/max vectors to compute an optimal epsilon\r\n\r\n\t\tthis.tolerance = 3 * Number.EPSILON * (\r\n\t\t\tMath.max( Math.abs( min.x ), Math.abs( max.x ) ) +\r\n\t\t\tMath.max( Math.abs( min.y ), Math.abs( max.y ) ) +\r\n\t\t\tMath.max( Math.abs( min.z ), Math.abs( max.z ) )\r\n\t\t);\r\n\r\n\t\treturn { min: minVertices, max: maxVertices };\r\n\r\n\t}\r\n\r\n\t// Computes the initial simplex assigning to its faces all the points\r\n\t// that are candidates to form part of the hull\r\n\r\n\tcomputeInitialHull() {\r\n\r\n\t\tconst vertices = this.vertices;\r\n\t\tconst extremes = this.computeExtremes();\r\n\t\tconst min = extremes.min;\r\n\t\tconst max = extremes.max;\r\n\r\n\t\t// 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\r\n\t\t// (max.x - min.x)\r\n\t\t// (max.y - min.y)\r\n\t\t// (max.z - min.z)\r\n\r\n\t\tlet maxDistance = 0;\r\n\t\tlet index = 0;\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst distance = max[ i ].point.getComponent( i ) - min[ i ].point.getComponent( i );\r\n\r\n\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\tmaxDistance = distance;\r\n\t\t\t\tindex = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst v0 = min[ index ];\r\n\t\tconst v1 = max[ index ];\r\n\t\tlet v2;\r\n\t\tlet v3;\r\n\r\n\t\t// 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\r\n\r\n\t\tmaxDistance = 0;\r\n\t\t_line3.set( v0.point, v1.point );\r\n\r\n\t\tfor ( let i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst vertex = vertices[ i ];\r\n\r\n\t\t\tif ( vertex !== v0 && vertex !== v1 ) {\r\n\r\n\t\t\t\t_line3.closestPointToPoint( vertex.point, true, _closestPoint );\r\n\r\n\t\t\t\tconst distance = _closestPoint.distanceToSquared( vertex.point );\r\n\r\n\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\tv2 = vertex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\r\n\r\n\t\tmaxDistance = - 1;\r\n\t\t_plane.setFromCoplanarPoints( v0.point, v1.point, v2.point );\r\n\r\n\t\tfor ( let i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst vertex = vertices[ i ];\r\n\r\n\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 ) {\r\n\r\n\t\t\t\tconst distance = Math.abs( _plane.distanceToPoint( vertex.point ) );\r\n\r\n\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\tv3 = vertex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst faces = [];\r\n\r\n\t\tif ( _plane.distanceToPoint( v3.point ) < 0 ) {\r\n\r\n\t\t\t// the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\r\n\r\n\t\t\tfaces.push(\r\n\t\t\t\tFace.create( v0, v1, v2 ),\r\n\t\t\t\tFace.create( v3, v1, v0 ),\r\n\t\t\t\tFace.create( v3, v2, v1 ),\r\n\t\t\t\tFace.create( v3, v0, v2 )\r\n\t\t\t);\r\n\r\n\t\t\t// set the twin edge\r\n\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst j = ( i + 1 ) % 3;\r\n\r\n\t\t\t\t// join face[ i ] i > 0, with the first face\r\n\r\n\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( j ) );\r\n\r\n\t\t\t\t// join face[ i ] with face[ i + 1 ], 1 <= i <= 3\r\n\r\n\t\t\t\tfaces[ i + 1 ].getEdge( 1 ).setTwin( faces[ j + 1 ].getEdge( 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\r\n\r\n\t\t\tfaces.push(\r\n\t\t\t\tFace.create( v0, v2, v1 ),\r\n\t\t\t\tFace.create( v3, v0, v1 ),\r\n\t\t\t\tFace.create( v3, v1, v2 ),\r\n\t\t\t\tFace.create( v3, v2, v0 )\r\n\t\t\t);\r\n\r\n\t\t\t// set the twin edge\r\n\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst j = ( i + 1 ) % 3;\r\n\r\n\t\t\t\t// join face[ i ] i > 0, with the first face\r\n\r\n\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( ( 3 - i ) % 3 ) );\r\n\r\n\t\t\t\t// join face[ i ] with face[ i + 1 ]\r\n\r\n\t\t\t\tfaces[ i + 1 ].getEdge( 0 ).setTwin( faces[ j + 1 ].getEdge( 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// the initial hull is the tetrahedron\r\n\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tthis.faces.push( faces[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t// initial assignment of vertices to the faces of the tetrahedron\r\n\r\n\t\tfor ( let i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst vertex = vertices[ i ];\r\n\r\n\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3 ) {\r\n\r\n\t\t\t\tmaxDistance = this.tolerance;\r\n\t\t\t\tlet maxFace = null;\r\n\r\n\t\t\t\tfor ( let j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\tconst distance = this.faces[ j ].distanceToPoint( vertex.point );\r\n\r\n\t\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t\tmaxFace = this.faces[ j ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( maxFace !== null ) {\r\n\r\n\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Removes inactive faces\r\n\r\n\treindexFaces() {\r\n\r\n\t\tconst activeFaces = [];\r\n\r\n\t\tfor ( let i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\tconst face = this.faces[ i ];\r\n\r\n\t\t\tif ( face.mark === Visible ) {\r\n\r\n\t\t\t\tactiveFaces.push( face );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.faces = activeFaces;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Finds the next vertex to create faces with the current hull\r\n\r\n\tnextVertexToAdd() {\r\n\r\n\t\t// if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\r\n\r\n\t\tif ( this.assigned.isEmpty() === false ) {\r\n\r\n\t\t\tlet eyeVertex, maxDistance = 0;\r\n\r\n\t\t\t// grap the first available face and start with the first visible vertex of that face\r\n\r\n\t\t\tconst eyeFace = this.assigned.first().face;\r\n\t\t\tlet vertex = eyeFace.outside;\r\n\r\n\t\t\t// now calculate the farthest vertex that face can see\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tconst distance = eyeFace.distanceToPoint( vertex.point );\r\n\r\n\t\t\t\tif ( distance > maxDistance ) {\r\n\r\n\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\teyeVertex = vertex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvertex = vertex.next;\r\n\r\n\t\t\t} while ( vertex !== null && vertex.face === eyeFace );\r\n\r\n\t\t\treturn eyeVertex;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Computes a chain of half edges in CCW order called the 'horizon'.\r\n\t// For an edge to be part of the horizon it must join a face that can see\r\n\t// 'eyePoint' and a face that cannot see 'eyePoint'.\r\n\r\n\tcomputeHorizon( eyePoint, crossEdge, face, horizon ) {\r\n\r\n\t\t// moves face's vertices to the 'unassigned' vertex list\r\n\r\n\t\tthis.deleteFaceVertices( face );\r\n\r\n\t\tface.mark = Deleted;\r\n\r\n\t\tlet edge;\r\n\r\n\t\tif ( crossEdge === null ) {\r\n\r\n\t\t\tedge = crossEdge = face.getEdge( 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// start from the next edge since 'crossEdge' was already analyzed\r\n\t\t\t// (actually 'crossEdge.twin' was the edge who called this method recursively)\r\n\r\n\t\t\tedge = crossEdge.next;\r\n\r\n\t\t}\r\n\r\n\t\tdo {\r\n\r\n\t\t\tconst twinEdge = edge.twin;\r\n\t\t\tconst oppositeFace = twinEdge.face;\r\n\r\n\t\t\tif ( oppositeFace.mark === Visible ) {\r\n\r\n\t\t\t\tif ( oppositeFace.distanceToPoint( eyePoint ) > this.tolerance ) {\r\n\r\n\t\t\t\t\t// the opposite face can see the vertex, so proceed with next edge\r\n\r\n\t\t\t\t\tthis.computeHorizon( eyePoint, twinEdge, oppositeFace, horizon );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// the opposite face can't see the vertex, so this edge is part of the horizon\r\n\r\n\t\t\t\t\thorizon.push( edge );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tedge = edge.next;\r\n\r\n\t\t} while ( edge !== crossEdge );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\r\n\r\n\taddAdjoiningFace( eyeVertex, horizonEdge ) {\r\n\r\n\t\t// all the half edges are created in ccw order thus the face is always pointing outside the hull\r\n\r\n\t\tconst face = Face.create( eyeVertex, horizonEdge.tail(), horizonEdge.head() );\r\n\r\n\t\tthis.faces.push( face );\r\n\r\n\t\t// join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\r\n\r\n\t\tface.getEdge( - 1 ).setTwin( horizonEdge.twin );\r\n\r\n\t\treturn face.getEdge( 0 ); // the half edge whose vertex is the eyeVertex\r\n\r\n\r\n\t}\r\n\r\n\t//  Adds 'horizon.length' faces to the hull, each face will be linked with the\r\n\t//  horizon opposite face and the face on the left/right\r\n\r\n\taddNewFaces( eyeVertex, horizon ) {\r\n\r\n\t\tthis.newFaces = [];\r\n\r\n\t\tlet firstSideEdge = null;\r\n\t\tlet previousSideEdge = null;\r\n\r\n\t\tfor ( let i = 0; i < horizon.length; i ++ ) {\r\n\r\n\t\t\tconst horizonEdge = horizon[ i ];\r\n\r\n\t\t\t// returns the right side edge\r\n\r\n\t\t\tconst sideEdge = this.addAdjoiningFace( eyeVertex, horizonEdge );\r\n\r\n\t\t\tif ( firstSideEdge === null ) {\r\n\r\n\t\t\t\tfirstSideEdge = sideEdge;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\r\n\r\n\t\t\t\tsideEdge.next.setTwin( previousSideEdge );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.newFaces.push( sideEdge.face );\r\n\t\t\tpreviousSideEdge = sideEdge;\r\n\r\n\t\t}\r\n\r\n\t\t// perform final join of new faces\r\n\r\n\t\tfirstSideEdge.next.setTwin( previousSideEdge );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Adds a vertex to the hull\r\n\r\n\taddVertexToHull( eyeVertex ) {\r\n\r\n\t\tconst horizon = [];\r\n\r\n\t\tthis.unassigned.clear();\r\n\r\n\t\t// remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\r\n\r\n\t\tthis.removeVertexFromFace( eyeVertex, eyeVertex.face );\r\n\r\n\t\tthis.computeHorizon( eyeVertex.point, null, eyeVertex.face, horizon );\r\n\r\n\t\tthis.addNewFaces( eyeVertex, horizon );\r\n\r\n\t\t// reassign 'unassigned' vertices to the new faces\r\n\r\n\t\tthis.resolveUnassignedPoints( this.newFaces );\r\n\r\n\t\treturn\tthis;\r\n\r\n\t}\r\n\r\n\tcleanup() {\r\n\r\n\t\tthis.assigned.clear();\r\n\t\tthis.unassigned.clear();\r\n\t\tthis.newFaces = [];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcompute() {\r\n\r\n\t\tlet vertex;\r\n\r\n\t\tthis.computeInitialHull();\r\n\r\n\t\t// add all available vertices gradually to the hull\r\n\r\n\t\twhile ( ( vertex = this.nextVertexToAdd() ) !== undefined ) {\r\n\r\n\t\t\tthis.addVertexToHull( vertex );\r\n\r\n\t\t}\r\n\r\n\t\tthis.reindexFaces();\r\n\r\n\t\tthis.cleanup();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nclass Face {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.normal = new Vector3();\r\n\t\tthis.midpoint = new Vector3();\r\n\t\tthis.area = 0;\r\n\r\n\t\tthis.constant = 0; // signed distance from face to the origin\r\n\t\tthis.outside = null; // reference to a vertex in a vertex list this face can see\r\n\t\tthis.mark = Visible;\r\n\t\tthis.edge = null;\r\n\r\n\t}\r\n\r\n\tstatic create( a, b, c ) {\r\n\r\n\t\tconst face = new Face();\r\n\r\n\t\tconst e0 = new HalfEdge( a, face );\r\n\t\tconst e1 = new HalfEdge( b, face );\r\n\t\tconst e2 = new HalfEdge( c, face );\r\n\r\n\t\t// join edges\r\n\r\n\t\te0.next = e2.prev = e1;\r\n\t\te1.next = e0.prev = e2;\r\n\t\te2.next = e1.prev = e0;\r\n\r\n\t\t// main half edge reference\r\n\r\n\t\tface.edge = e0;\r\n\r\n\t\treturn face.compute();\r\n\r\n\t}\r\n\r\n\tgetEdge( i ) {\r\n\r\n\t\tlet edge = this.edge;\r\n\r\n\t\twhile ( i > 0 ) {\r\n\r\n\t\t\tedge = edge.next;\r\n\t\t\ti --;\r\n\r\n\t\t}\r\n\r\n\t\twhile ( i < 0 ) {\r\n\r\n\t\t\tedge = edge.prev;\r\n\t\t\ti ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn edge;\r\n\r\n\t}\r\n\r\n\tcompute() {\r\n\r\n\t\tconst a = this.edge.tail();\r\n\t\tconst b = this.edge.head();\r\n\t\tconst c = this.edge.next.head();\r\n\r\n\t\t_triangle.set( a.point, b.point, c.point );\r\n\r\n\t\t_triangle.getNormal( this.normal );\r\n\t\t_triangle.getMidpoint( this.midpoint );\r\n\t\tthis.area = _triangle.getArea();\r\n\r\n\t\tthis.constant = this.normal.dot( this.midpoint );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) - this.constant;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Entity for a Doubly-Connected Edge List (DCEL).\r\n\r\nclass HalfEdge {\r\n\r\n\r\n\tconstructor( vertex, face ) {\r\n\r\n\t\tthis.vertex = vertex;\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\t\tthis.twin = null;\r\n\t\tthis.face = face;\r\n\r\n\t}\r\n\r\n\thead() {\r\n\r\n\t\treturn this.vertex;\r\n\r\n\t}\r\n\r\n\ttail() {\r\n\r\n\t\treturn this.prev ? this.prev.vertex : null;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\tconst head = this.head();\r\n\t\tconst tail = this.tail();\r\n\r\n\t\tif ( tail !== null ) {\r\n\r\n\t\t\treturn tail.point.distanceTo( head.point );\r\n\r\n\t\t}\r\n\r\n\t\treturn - 1;\r\n\r\n\t}\r\n\r\n\tlengthSquared() {\r\n\r\n\t\tconst head = this.head();\r\n\t\tconst tail = this.tail();\r\n\r\n\t\tif ( tail !== null ) {\r\n\r\n\t\t\treturn tail.point.distanceToSquared( head.point );\r\n\r\n\t\t}\r\n\r\n\t\treturn - 1;\r\n\r\n\t}\r\n\r\n\tsetTwin( edge ) {\r\n\r\n\t\tthis.twin = edge;\r\n\t\tedge.twin = this;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// A vertex as a double linked list node.\r\n\r\nclass VertexNode {\r\n\r\n\tconstructor( point ) {\r\n\r\n\t\tthis.point = point;\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\t\tthis.face = null; // the face that is able to see this vertex\r\n\r\n\t}\r\n\r\n}\r\n\r\n// A double linked list that contains vertex nodes.\r\n\r\nclass VertexList {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.head = null;\r\n\t\tthis.tail = null;\r\n\r\n\t}\r\n\r\n\tfirst() {\r\n\r\n\t\treturn this.head;\r\n\r\n\t}\r\n\r\n\tlast() {\r\n\r\n\t\treturn this.tail;\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\tthis.head = this.tail = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Inserts a vertex before the target vertex\r\n\r\n\tinsertBefore( target, vertex ) {\r\n\r\n\t\tvertex.prev = target.prev;\r\n\t\tvertex.next = target;\r\n\r\n\t\tif ( vertex.prev === null ) {\r\n\r\n\t\t\tthis.head = vertex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertex.prev.next = vertex;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.prev = vertex;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Inserts a vertex after the target vertex\r\n\r\n\tinsertAfter( target, vertex ) {\r\n\r\n\t\tvertex.prev = target;\r\n\t\tvertex.next = target.next;\r\n\r\n\t\tif ( vertex.next === null ) {\r\n\r\n\t\t\tthis.tail = vertex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertex.next.prev = vertex;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.next = vertex;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Appends a vertex to the end of the linked list\r\n\r\n\tappend( vertex ) {\r\n\r\n\t\tif ( this.head === null ) {\r\n\r\n\t\t\tthis.head = vertex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.tail.next = vertex;\r\n\r\n\t\t}\r\n\r\n\t\tvertex.prev = this.tail;\r\n\t\tvertex.next = null; // the tail has no subsequent vertex\r\n\r\n\t\tthis.tail = vertex;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Appends a chain of vertices where 'vertex' is the head.\r\n\r\n\tappendChain( vertex ) {\r\n\r\n\t\tif ( this.head === null ) {\r\n\r\n\t\t\tthis.head = vertex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.tail.next = vertex;\r\n\r\n\t\t}\r\n\r\n\t\tvertex.prev = this.tail;\r\n\r\n\t\t// ensure that the 'tail' reference points to the last vertex of the chain\r\n\r\n\t\twhile ( vertex.next !== null ) {\r\n\r\n\t\t\tvertex = vertex.next;\r\n\r\n\t\t}\r\n\r\n\t\tthis.tail = vertex;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Removes a vertex from the linked list\r\n\r\n\tremove( vertex ) {\r\n\r\n\t\tif ( vertex.prev === null ) {\r\n\r\n\t\t\tthis.head = vertex.next;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertex.prev.next = vertex.next;\r\n\r\n\t\t}\r\n\r\n\t\tif ( vertex.next === null ) {\r\n\r\n\t\t\tthis.tail = vertex.prev;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertex.next.prev = vertex.prev;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\r\n\r\n\tremoveSubList( a, b ) {\r\n\r\n\t\tif ( a.prev === null ) {\r\n\r\n\t\t\tthis.head = b.next;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ta.prev.next = b.next;\r\n\r\n\t\t}\r\n\r\n\t\tif ( b.next === null ) {\r\n\r\n\t\t\tthis.tail = a.prev;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tb.next.prev = a.prev;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\treturn this.head === null;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ConvexHull, Face, HalfEdge, VertexNode, VertexList };\r\n", "import {\r\n\tBufferGeometry,\r\n\tFloat32BufferAttribute\r\n} from 'three';\r\nimport { ConvexHull } from '../math/ConvexHull.js';\r\n\r\nclass ConvexGeometry extends BufferGeometry {\r\n\r\n\tconstructor( points = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\r\n\t\tconst convexHull = new ConvexHull().setFromPoints( points );\r\n\r\n\t\t// generate vertices and normals\r\n\r\n\t\tconst faces = convexHull.faces;\r\n\r\n\t\tfor ( let i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tconst face = faces[ i ];\r\n\t\t\tlet edge = face.edge;\r\n\r\n\t\t\t// we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tconst point = edge.head().point;\r\n\r\n\t\t\t\tvertices.push( point.x, point.y, point.z );\r\n\t\t\t\tnormals.push( face.normal.x, face.normal.y, face.normal.z );\r\n\r\n\t\t\t\tedge = edge.next;\r\n\r\n\t\t\t} while ( edge !== face.edge );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ConvexGeometry };\r\n"],
  "mappings": "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",
  "names": []
}
